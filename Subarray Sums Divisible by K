class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int ans=0;
      Map<Integer,Integer> map=new HashMap<>();
      map.put(0,1);//rem=0,freq=1
      int sum=0;
      for(int i=0;i<nums.length;i++){
          sum=sum+nums[i];//prefix sum
          int rem=sum % k;//get remainder
          if(rem<0){     //if any rem is negative make it positive
              rem=rem+k;
          }
          if(map.containsKey(rem)){//found a subarray which is divisible by K
              ans=ans+map.get(rem);
              map.put(rem,map.get(rem)+1);
          }else{
              map.put(rem,1);
          }
      }
        return ans;
    }
}
//calculate prefix sum 
//if any of the parts gets same rem there forms a subarray which is divisible by k 
//add freq to ans
   //ex:                4,      5,    0,    -2,   -3,     1
//preSum        0       4       9     9      7     4      5
   //rem        0       4       4     4      2     4      0 
//(sum,freq)  (0,1)  (4,1)   (4,2)  (4,3) (2,1) (4,4)  (0,2)
//ans  
